// Usually compass hacks apply to both ie6 & 7 -- set this to false to disable support for both.
$legacy-support-for-ie: true !default;

// Setting this to false will result in smaller output, but no support for ie6 hacks
$legacy-support-for-ie6: $legacy-support-for-ie !default;

// Setting this to false will result in smaller output, but no support for ie7 hacks
$legacy-support-for-ie7: $legacy-support-for-ie !default;

// Setting this to false will result in smaller output, but no support for legacy ie8 hacks
$legacy-support-for-ie8: $legacy-support-for-ie !default;

// @private
// The user can simply set $legacy-support-for-ie and 6, 7, and 8 will be set accordingly,
// But in case the user set each of those explicitly, we need to sync the value of
// this combined variable.
$legacy-support-for-ie: $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8;

// Whether to output legacy support for mozilla.
// Usually this means hacks to support Firefox 3.6 or earlier.
$legacy-support-for-mozilla: true;

// Support for mozilla in experimental css3 properties (-moz).
$experimental-support-for-mozilla      : true !default;
// Support for webkit in experimental css3 properties (-webkit).
$experimental-support-for-webkit       : true !default;
// Support for webkit's original (non-standard) gradient syntax.
$support-for-original-webkit-gradients : true !default;
// Support for opera in experimental css3 properties (-o).
$experimental-support-for-opera        : true !default;
// Support for microsoft in experimental css3 properties (-ms).
$experimental-support-for-microsoft    : true !default;
// Support for khtml in experimental css3 properties (-khtml).
$experimental-support-for-khtml        : false !default;
// Support for svg in experimental css3 properties.
// Setting this to true might add significant size to your
// generated stylesheets.
$experimental-support-for-svg          : false !default;
// Support for CSS PIE in experimental css3 properties (-pie).
$experimental-support-for-pie          : false !default;

// This mixin provides basic support for CSS3 properties and
// their corresponding experimental CSS2 properties when
// the implementations are identical except for the property
// prefix.
@mixin experimental($property, $value,
$moz      : $experimental-support-for-mozilla,
$webkit   : $experimental-support-for-webkit,
$o        : $experimental-support-for-opera,
$ms       : $experimental-support-for-microsoft,
$khtml    : $experimental-support-for-khtml,
$official : true
) {
	@if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }
	@if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }
	@if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }
	@if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }
	@if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }
	@if $official                                        {         #{$property} : $value; }
}

// Same as experimental(), but for cases when the property is the same and the value is vendorized
@mixin experimental-value($property, $value,
$moz      : $experimental-support-for-mozilla,
$webkit   : $experimental-support-for-webkit,
$o        : $experimental-support-for-opera,
$ms       : $experimental-support-for-microsoft,
$khtml    : $experimental-support-for-khtml,
$official : true
) {
	@if $webkit  and $experimental-support-for-webkit    { #{$property} : -webkit-#{$value}; }
	@if $khtml   and $experimental-support-for-khtml     { #{$property} :  -khtml-#{$value}; }
	@if $moz     and $experimental-support-for-mozilla   { #{$property} :    -moz-#{$value}; }
	@if $ms      and $experimental-support-for-microsoft { #{$property} :     -ms-#{$value}; }
	@if $o       and $experimental-support-for-opera     { #{$property} :      -o-#{$value}; }
	@if $official                                        { #{$property} :         #{$value}; }
}



$default-border-radius: 5px !default;

@mixin border-radius($radius: $default-border-radius, $vertical-radius: false) {

	@if $vertical-radius {
	// Webkit doesn't understand the official shorthand syntax for specifying
	// a vertical radius unless so in case there's several we only take the first.
		@include experimental(border-radius, first-value-of($radius) first-value-of($vertical-radius),
				not -moz,
			-webkit,
				not -o,
				not -ms,
				not -khtml,
				not official
		);
		@include experimental("border-radius", $radius unquote("/") $vertical-radius,
			-moz,
				not -webkit,
				not -o,
				not -ms,
			-khtml,
			official
		);
	}
	@else {
		@include experimental(border-radius, $radius);
	}
}

@mixin border-corner-radius($vert, $horz, $radius: $default-border-radius) {
// Support for mozilla's syntax for specifying a corner
	@include experimental("border-radius-#{$vert}#{$horz}", $radius,
		-moz,
			not -webkit,
			not -o,
			not -ms,
			not -khtml,
			not official
	);
	@include experimental("border-#{$vert}-#{$horz}-radius", $radius,
			not -moz,
		-webkit,
			not -o,
			not -ms,
		-khtml,
		official
	);

}

// Round top-left corner only

@mixin border-top-left-radius($radius: $default-border-radius) {
	@include border-corner-radius(top, left, $radius); }

// Round top-right corner only

@mixin border-top-right-radius($radius: $default-border-radius) {
	@include border-corner-radius(top, right, $radius); }

// Round bottom-left corner only

@mixin border-bottom-left-radius($radius: $default-border-radius) {
	@include border-corner-radius(bottom, left, $radius); }

// Round bottom-right corner only

@mixin border-bottom-right-radius($radius: $default-border-radius) {
	@include border-corner-radius(bottom, right, $radius); }

// Round both top corners by amount
@mixin border-top-radius($radius: $default-border-radius) {
	@include border-top-left-radius($radius);
	@include border-top-right-radius($radius); }

// Round both right corners by amount
@mixin border-right-radius($radius: $default-border-radius) {
	@include border-top-right-radius($radius);
	@include border-bottom-right-radius($radius); }

// Round both bottom corners by amount
@mixin border-bottom-radius($radius: $default-border-radius) {
	@include border-bottom-left-radius($radius);
	@include border-bottom-right-radius($radius); }

// Round both left corners by amount
@mixin border-left-radius($radius: $default-border-radius) {
	@include border-top-left-radius($radius);
	@include border-bottom-left-radius($radius); }